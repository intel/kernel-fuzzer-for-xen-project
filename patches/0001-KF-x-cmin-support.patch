From 027201f02dd9d560257acb04a7ffe55e0674a66f Mon Sep 17 00:00:00 2001
From: b <buherator@silentsignal.hu>
Date: Wed, 30 Dec 2020 17:42:18 +0100
Subject: [PATCH] KF/x cmin support

---
 afl-cmin             | 15 ++++++++++++---
 include/config.h     |  4 ++++
 include/forkserver.h |  2 ++
 src/afl-forkserver.c | 13 +++++++------
 src/afl-fuzz.c       | 14 ++++++++++++--
 src/afl-showmap.c    | 11 ++++++++++-
 6 files changed, 47 insertions(+), 12 deletions(-)

diff --git a/afl-cmin b/afl-cmin
index d38e7a9..7bef954 100755
--- a/afl-cmin
+++ b/afl-cmin
@@ -107,6 +107,7 @@ function usage() {
 "  -m megs       - memory limit for child process ("mem_limit" MB)\n" \
 "  -t msec       - run time limit for child process (none)\n" \
 "  -Q            - use binary-only instrumentation (QEMU mode)\n" \
+"  -X            - use virtual machine instrumentation (Xen mode)\n" \
 "  -U            - use unicorn-based instrumentation (unicorn mode)\n" \
 "\n" \
 "Minimization settings:\n" \
@@ -135,7 +136,7 @@ BEGIN {
   # process options
   Opterr = 1    # default is to diagnose
   Optind = 1    # skip ARGV[0]
-  while ((_go_c = getopt(ARGC, ARGV, "hi:o:f:m:t:eCQU?")) != -1) {
+  while ((_go_c = getopt(ARGC, ARGV, "hi:o:f:m:t:eCQXU?")) != -1) {
     if (_go_c == "i") {
       if (!Optarg) usage()
       if (in_dir) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
@@ -181,7 +182,15 @@ BEGIN {
       if ( !mem_limit_given ) mem_limit = "250"
       qemu_mode = 1
       continue
-    } else 
+    }
+    if (_go_c == "X") {
+      if (xen_mode) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
+      extra_par = extra_par " -X"
+      if ( !mem_limit_given ) mem_limit = "1500"
+      xen_mode = 1
+      continue
+    } 
+    else 
     if (_go_c == "U") {
       if (unicorn_mode) { print "Option "_go_c" is only allowed once" > "/dev/stderr"}
       extra_par = extra_par " -U"
@@ -272,7 +281,7 @@ BEGIN {
     target_bin = tnew
   }
 
-  if (!ENVIRON["AFL_SKIP_BIN_CHECK"] && !qemu_mode && !unicorn_mode) {
+  if (!ENVIRON["AFL_SKIP_BIN_CHECK"] && !xen_mode && !qemu_mode && !unicorn_mode) {
     if (0 != system( "grep -q __AFL_SHM_ID "target_bin )) {
       print "[-] Error: binary '"target_bin"' doesn't appear to be instrumented." > "/dev/stderr"
       exit 1
diff --git a/include/config.h b/include/config.h
index 711d0b7..b22f3d3 100644
--- a/include/config.h
+++ b/include/config.h
@@ -86,6 +86,10 @@
 
 #define MEM_LIMIT_UNICORN 200
 
+/* Default memory limit when running in Xen mode (MB): */
+
+#define MEM_LIMIT_XEN 750
+
 /* Number of calibration cycles per every new test case (and for test
    cases that show variable behavior): */
 
diff --git a/include/forkserver.h b/include/forkserver.h
index 717493d..c9a2e50 100644
--- a/include/forkserver.h
+++ b/include/forkserver.h
@@ -80,6 +80,8 @@ typedef struct afl_forkserver {
 
   u8 qemu_mode;                         /* if running in qemu mode or not   */
 
+  u8 xen_mode;                          /* if running in qemu mode or not   */
+
   u32 *shmem_fuzz_len;                  /* length of the fuzzing test case  */
 
   u8 *shmem_fuzz;                       /* allocated memory for fuzzing     */
diff --git a/src/afl-forkserver.c b/src/afl-forkserver.c
index b273433..42cd652 100644
--- a/src/afl-forkserver.c
+++ b/src/afl-forkserver.c
@@ -488,12 +488,12 @@ void afl_fsrv_start(afl_forkserver_t *fsrv, char **argv,
 
     if (!time_ms) {
 
-      kill(fsrv->fsrv_pid, SIGKILL);
+      kill(fsrv->fsrv_pid, fsrv->xen_mode ? SIGTERM : SIGKILL);
 
     } else if (time_ms > fsrv->exec_tmout * FORK_WAIT_MULT) {
 
       fsrv->last_run_timed_out = 1;
-      kill(fsrv->fsrv_pid, SIGKILL);
+      kill(fsrv->fsrv_pid, fsrv->xen_mode ? SIGTERM : SIGKILL);
 
     } else {
 
@@ -843,10 +843,10 @@ void afl_fsrv_start(afl_forkserver_t *fsrv, char **argv,
 
 static void afl_fsrv_kill(afl_forkserver_t *fsrv) {
 
-  if (fsrv->child_pid > 0) { kill(fsrv->child_pid, SIGKILL); }
+  if (fsrv->child_pid > 0 && !fsrv->xen_mode ) { kill(fsrv->child_pid, SIGKILL); }
   if (fsrv->fsrv_pid > 0) {
 
-    kill(fsrv->fsrv_pid, SIGKILL);
+    kill(fsrv->fsrv_pid, fsrv->xen_mode ? SIGTERM : SIGKILL);
     if (waitpid(fsrv->fsrv_pid, NULL, 0) <= 0) { WARNF("error waitpid\n"); }
 
   }
@@ -963,7 +963,8 @@ fsrv_run_result_t afl_fsrv_run_target(afl_forkserver_t *fsrv, u32 timeout,
     /* If there was no response from forkserver after timeout seconds,
     we kill the child. The forkserver should inform us afterwards */
 
-    kill(fsrv->child_pid, SIGKILL);
+    kill(fsrv->child_pid, fsrv->xen_mode ? SIGTERM : SIGKILL);
+
     fsrv->last_run_timed_out = 1;
     if (read(fsrv->fsrv_st_fd, &fsrv->child_status, 4) < 4) { exec_ms = 0; }
 
@@ -1013,7 +1014,7 @@ fsrv_run_result_t afl_fsrv_run_target(afl_forkserver_t *fsrv, u32 timeout,
 
     fsrv->last_kill_signal = WTERMSIG(fsrv->child_status);
 
-    if (fsrv->last_run_timed_out && fsrv->last_kill_signal == SIGKILL) {
+    if (fsrv->last_run_timed_out && fsrv->last_kill_signal == (fsrv->xen_mode ? SIGTERM : SIGKILL) ) {
 
       return FSRV_RUN_TMOUT;
 
diff --git a/src/afl-fuzz.c b/src/afl-fuzz.c
index cefcd73..40a90c2 100644
--- a/src/afl-fuzz.c
+++ b/src/afl-fuzz.c
@@ -126,7 +126,8 @@ static void usage(afl_state_t *afl, u8 *argv0, int more_help) {
       "  -Q            - use binary-only instrumentation (QEMU mode)\n"
       "  -U            - use unicorn-based instrumentation (Unicorn mode)\n"
       "  -W            - use qemu-based instrumentation with Wine (Wine "
-      "mode)\n\n"
+      "mode)\n"
+      "  -X            - use virtual-machine instrumentation (Xen mode)\n\n"
 
       "Mutator settings:\n"
       "  -R[R]         - add Radamsa as mutator, add another -R to exclusivly "
@@ -292,7 +293,7 @@ int main(int argc, char **argv_orig, char **envp) {
   afl->init_seed = tv.tv_sec ^ tv.tv_usec ^ getpid();
 
   while ((opt = getopt(argc, argv,
-                       "+c:i:I:o:f:m:t:T:dnCB:S:M:x:QNUWe:p:s:V:E:L:hRP:")) >
+                       "+c:i:I:o:f:m:t:T:dnCB:S:M:x:QNUWe:p:s:V:E:L:hRP:X")) >
          0) {
 
     switch (opt) {
@@ -602,6 +603,15 @@ int main(int argc, char **argv_orig, char **envp) {
 
         break;
 
+      case 'X':                                                /* Xen mode */
+
+        if (afl->fsrv.xen_mode) { FATAL("Multiple -X options not supported"); }
+        afl->fsrv.xen_mode = 1;
+
+        if (!mem_limit_given) { afl->fsrv.mem_limit = MEM_LIMIT_XEN; }
+
+        break;
+
       case 'W':                                           /* Wine+QEMU mode */
 
         if (afl->use_wine) { FATAL("Multiple -W options not supported"); }
diff --git a/src/afl-showmap.c b/src/afl-showmap.c
index 7b46cd2..6f06ed1 100644
--- a/src/afl-showmap.c
+++ b/src/afl-showmap.c
@@ -533,6 +533,7 @@ static void usage(u8 *argv0) {
       "  -t msec       - timeout for each run (none)\n"
       "  -m megs       - memory limit for child process (%d MB)\n"
       "  -Q            - use binary-only instrumentation (QEMU mode)\n"
+      "  -X            - use virtual machine instrumentation (Xen mode)\n"
       "  -U            - use Unicorn-based instrumentation (Unicorn mode)\n"
       "  -W            - use qemu-based instrumentation with Wine (Wine mode)\n"
       "                  (Not necessary, here for consistency with other afl-* "
@@ -589,7 +590,7 @@ int main(int argc, char **argv_orig, char **envp) {
 
   if (getenv("AFL_QUIET") != NULL) { be_quiet = 1; }
 
-  while ((opt = getopt(argc, argv, "+i:o:f:m:t:A:eqZQUWbcrh")) > 0) {
+  while ((opt = getopt(argc, argv, "+i:o:f:m:t:A:eqZQXUWbcrh")) > 0) {
 
     switch (opt) {
 
@@ -720,6 +721,14 @@ int main(int argc, char **argv_orig, char **envp) {
         fsrv->qemu_mode = 1;
         break;
 
+    case 'X':
+
+        if (fsrv->xen_mode) { FATAL("Multiple -X options not supported"); }
+
+        fsrv->xen_mode = 1;
+        break;
+
+
       case 'U':
 
         if (unicorn_mode) { FATAL("Multiple -U options not supported"); }
-- 
2.25.1

